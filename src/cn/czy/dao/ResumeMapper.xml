<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.czy.dao.ResumeMapper" >
  <resultMap id="BaseResultMap" type="cn.czy.pojo.Resume" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="department" property="department" jdbcType="VARCHAR" />
    <result column="studentClass" property="studentclass" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="TINYINT" />
    <result column="email" property="email" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.czy.pojo.ResumeWithBLOBs" extends="BaseResultMap" >
    <result column="skill" property="skill" jdbcType="LONGVARCHAR" />
    <result column="experience" property="experience" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, name, phone, department, studentClass, sex, email
  </sql>
  <sql id="Blob_Column_List" >
    skill, experience
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="cn.czy.pojo.ResumeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.czy.pojo.ResumeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from resume
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from resume
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.czy.pojo.ResumeExample" >
    delete from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.czy.pojo.ResumeWithBLOBs" >
    insert into resume (id, user_id, name, 
      phone, department, studentClass, 
      sex, email, skill, 
      experience)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{department,jdbcType=VARCHAR}, #{studentclass,jdbcType=VARCHAR}, 
      #{sex,jdbcType=TINYINT}, #{email,jdbcType=VARCHAR}, #{skill,jdbcType=LONGVARCHAR}, 
      #{experience,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.czy.pojo.ResumeWithBLOBs" >
  	<selectKey keyProperty="id" order="AFTER" resultType="int">
  		SELECT LAST_INSERT_ID()
  	</selectKey>
    insert into resume
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="department != null" >
        department,
      </if>
      <if test="studentclass != null" >
        studentClass,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="skill != null" >
        skill,
      </if>
      <if test="experience != null" >
        experience,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        #{department,jdbcType=VARCHAR},
      </if>
      <if test="studentclass != null" >
        #{studentclass,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="skill != null" >
        #{skill,jdbcType=LONGVARCHAR},
      </if>
      <if test="experience != null" >
        #{experience,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.czy.pojo.ResumeExample" resultType="java.lang.Integer" >
    select count(*) from resume
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update resume
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.department != null" >
        department = #{record.department,jdbcType=VARCHAR},
      </if>
      <if test="record.studentclass != null" >
        studentClass = #{record.studentclass,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null" >
        sex = #{record.sex,jdbcType=TINYINT},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.skill != null" >
        skill = #{record.skill,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.experience != null" >
        experience = #{record.experience,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update resume
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      department = #{record.department,jdbcType=VARCHAR},
      studentClass = #{record.studentclass,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=TINYINT},
      email = #{record.email,jdbcType=VARCHAR},
      skill = #{record.skill,jdbcType=LONGVARCHAR},
      experience = #{record.experience,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update resume
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      department = #{record.department,jdbcType=VARCHAR},
      studentClass = #{record.studentclass,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=TINYINT},
      email = #{record.email,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.czy.pojo.ResumeWithBLOBs" >
    update resume
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="department != null" >
        department = #{department,jdbcType=VARCHAR},
      </if>
      <if test="studentclass != null" >
        studentClass = #{studentclass,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="skill != null" >
        skill = #{skill,jdbcType=LONGVARCHAR},
      </if>
      <if test="experience != null" >
        experience = #{experience,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.czy.pojo.ResumeWithBLOBs" >
    update resume
    set user_id = #{userId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      department = #{department,jdbcType=VARCHAR},
      studentClass = #{studentclass,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      email = #{email,jdbcType=VARCHAR},
      skill = #{skill,jdbcType=LONGVARCHAR},
      experience = #{experience,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.czy.pojo.Resume" >
    update resume
    set user_id = #{userId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      department = #{department,jdbcType=VARCHAR},
      studentClass = #{studentclass,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      email = #{email,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="findActivityJoinerByActivityId" parameterType="int" resultMap="ResultMapWithBLOBs">
  SELECT * FROM resume 
	WHERE user_id in
		(SELECT `joined`.user_id FROM `joined` WHERE `joined`.acticity_id=#{acticityId}
		)
  </select>
  
  <select id="searchResumeBySkillAndDepart" parameterType="cn.czy.pojo.ResumeWithBLOBs" resultMap="ResultMapWithBLOBs" >
  SELECT * FROM resume
	WHERE resume.department LIKE CONCAT('%',#{department},'%')
	AND resume.skill LIKE CONCAT('%',#{skill},'%')
  </select>
</mapper>